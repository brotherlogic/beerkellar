// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.3
// source: api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BeerKeller_AddBeer_FullMethodName = "/beerkellar.BeerKeller/AddBeer"
	BeerKeller_GetBeer_FullMethodName = "/beerkellar.BeerKeller/GetBeer"
)

// BeerKellerClient is the client API for BeerKeller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BeerKellerClient interface {
	// Adds a beer to the cellar
	AddBeer(ctx context.Context, in *AddBeerRequest, opts ...grpc.CallOption) (*AddBeerResponse, error)
	GetBeer(ctx context.Context, in *GetBeerRequest, opts ...grpc.CallOption) (*GetBeerResponse, error)
}

type beerKellerClient struct {
	cc grpc.ClientConnInterface
}

func NewBeerKellerClient(cc grpc.ClientConnInterface) BeerKellerClient {
	return &beerKellerClient{cc}
}

func (c *beerKellerClient) AddBeer(ctx context.Context, in *AddBeerRequest, opts ...grpc.CallOption) (*AddBeerResponse, error) {
	out := new(AddBeerResponse)
	err := c.cc.Invoke(ctx, BeerKeller_AddBeer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beerKellerClient) GetBeer(ctx context.Context, in *GetBeerRequest, opts ...grpc.CallOption) (*GetBeerResponse, error) {
	out := new(GetBeerResponse)
	err := c.cc.Invoke(ctx, BeerKeller_GetBeer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BeerKellerServer is the server API for BeerKeller service.
// All implementations should embed UnimplementedBeerKellerServer
// for forward compatibility
type BeerKellerServer interface {
	// Adds a beer to the cellar
	AddBeer(context.Context, *AddBeerRequest) (*AddBeerResponse, error)
	GetBeer(context.Context, *GetBeerRequest) (*GetBeerResponse, error)
}

// UnimplementedBeerKellerServer should be embedded to have forward compatible implementations.
type UnimplementedBeerKellerServer struct {
}

func (UnimplementedBeerKellerServer) AddBeer(context.Context, *AddBeerRequest) (*AddBeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBeer not implemented")
}
func (UnimplementedBeerKellerServer) GetBeer(context.Context, *GetBeerRequest) (*GetBeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeer not implemented")
}

// UnsafeBeerKellerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BeerKellerServer will
// result in compilation errors.
type UnsafeBeerKellerServer interface {
	mustEmbedUnimplementedBeerKellerServer()
}

func RegisterBeerKellerServer(s grpc.ServiceRegistrar, srv BeerKellerServer) {
	s.RegisterService(&BeerKeller_ServiceDesc, srv)
}

func _BeerKeller_AddBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeerKellerServer).AddBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeerKeller_AddBeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeerKellerServer).AddBeer(ctx, req.(*AddBeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeerKeller_GetBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeerKellerServer).GetBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeerKeller_GetBeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeerKellerServer).GetBeer(ctx, req.(*GetBeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BeerKeller_ServiceDesc is the grpc.ServiceDesc for BeerKeller service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BeerKeller_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "beerkellar.BeerKeller",
	HandlerType: (*BeerKellerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBeer",
			Handler:    _BeerKeller_AddBeer_Handler,
		},
		{
			MethodName: "GetBeer",
			Handler:    _BeerKeller_GetBeer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
